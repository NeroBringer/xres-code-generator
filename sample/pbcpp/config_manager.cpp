
//
// generated by xrescode on 2019-06-10 18:48:31, please don't edit it
//

#ifdef _MSC_VER
#include <Windows.h>
#endif

#include <config/compile_optimize.h>

#include <common/file_system.h>
#include <common/string_oprs.h>
#include <log/log_wrapper.h>

#include <lock/lock_holder.h>

#include "config_manager.h"


namespace excel {
    config_manager::config_manager() : 
        read_file_handle_(config_manager::default_buffer_loader), 
        read_version_handle_(default_version_loader) {}

    config_manager::~config_manager() {}

    int config_manager::init() {
        return 0;
    }

    int config_manager::init_group() {
        std::string version;
        {
            ::util::lock::read_lock_holder rlh(handle_lock_);
            if (!read_version_handle_) {
                WLOGERROR("config_manager version handle not set");
                return -1;
            }
        
            if (!read_version_handle_(version)) {
                WLOGERROR("config_manager read version failed");
                return -2;
            }
        }

        do {
            // 检查版本号
            ::util::lock::read_lock_holder wlh(config_group_lock_);
            if (config_group_list_.empty()) {
                break;
            }

            if (!config_group_list_.back()) {
                break;
            }

            // 版本未变化，不需要reload
            // if (0 == ::utils::string::version_compare(version.c_str(), config_group_list_.back()->version.c_str())) {
            if (version == config_group_list_.back()->version) {
                return 0;
            }
        } while (false);

        config_group_ptr_t cfg_group = std::make_shared<config_group_t>();
        if (!cfg_group) {
            WLOGERROR("config_manager malloc config group failed");
            return -3;
        }
        cfg_group->version = version;

        // 加载数据走缓式评估，按需加载
        int ret = 0;
        int res = 0;
        res = cfg_group->FaActorInfo.on_inited();
        if (res < 0) {
            WLOGERROR("FaActorInfo.on_inited() failed, res: %d", res);
            ret = res;
        } else if (ret >= 0) {
            ret += res;
        }
        res = cfg_group->FaMapInfo.on_inited();
        if (res < 0) {
            WLOGERROR("FaMapInfo.on_inited() failed, res: %d", res);
            ret = res;
        } else if (ret >= 0) {
            ret += res;
        }
        res = cfg_group->FaTerrainInfo.on_inited();
        if (res < 0) {
            WLOGERROR("FaTerrainInfo.on_inited() failed, res: %d", res);
            ret = res;
        } else if (ret >= 0) {
            ret += res;
        }

        if (ret >= 0) {
            ::util::lock::write_lock_holder wlh(config_group_lock_);
            config_group_list_.push_back(cfg_group);
        }

        return ret;
    }

    bool config_manager::load_file_data(std::string& write_to, const std::string& file_path) {
        ::util::lock::read_lock_holder rlh(handle_lock_);

        if (!read_file_handle_) {
            WLOGERROR("invalid file data excel.");
            return false;
        }

        return read_file_handle_(write_to, file_path.c_str());
    }

    int config_manager::reload() {
        return init_group();
    }

    int config_manager::reload_all() {
        int ret = reload();
        if (0 != ret) {
            return 0;
        }

        config_group_ptr_t cfg_group = get_current_config_group();
        if (!cfg_group) {
            WLOGERROR("mutable config group failed");
            return -2;
        }

        // 触发加载所有表
        int res = 0;
        res = cfg_group->FaActorInfo.load_all();
        if (res < 0) {
            WLOGERROR("FaActorInfo.load_all() failed, res: %d", res);
            ret = res;
        } else if (ret >= 0) {
            ret += res;
        }
        res = cfg_group->FaMapInfo.load_all();
        if (res < 0) {
            WLOGERROR("FaMapInfo.load_all() failed, res: %d", res);
            ret = res;
        } else if (ret >= 0) {
            ret += res;
        }
        res = cfg_group->FaTerrainInfo.load_all();
        if (res < 0) {
            WLOGERROR("FaTerrainInfo.load_all() failed, res: %d", res);
            ret = res;
        } else if (ret >= 0) {
            ret += res;
        }

        return ret;
    }

    config_manager::read_buffer_func_t config_manager::get_buffer_loader() const { 
        ::util::lock::read_lock_holder rlh(handle_lock_);
        
        return read_file_handle_;
    }

    void config_manager::set_buffer_loader(read_buffer_func_t fn) { 
        ::util::lock::write_lock_holder wlh(handle_lock_);

        read_file_handle_ = fn; 
    }

    config_manager::read_version_func_t config_manager::get_version_loader() const { 
        ::util::lock::read_lock_holder rlh(handle_lock_);

        return read_version_handle_; 
    }

    void config_manager::set_version_loader(read_version_func_t fn) { 
        ::util::lock::write_lock_holder wlh(handle_lock_);

        read_version_handle_ = fn; 
    }

    config_manager::config_group_ptr_t config_manager::get_current_config_group() {
        {
            ::util::lock::read_lock_holder rlh(config_group_lock_);
            if (likely(!config_group_list_.empty())) {
                return *config_group_list_.rbegin();
            }
        }

        if (0 == init_group()) {
            ::util::lock::read_lock_holder rlh(config_group_lock_);
            if (likely(!config_group_list_.empty())) {
                return *config_group_list_.rbegin();
            }
        }

        return nullptr;
    }

    bool config_manager::default_buffer_loader(std::string& out, const char* path) {
        // if (util::file_system::is_abs_path(path)) {
        //    return util::file_system::get_file_content(out, path, true);
        //} else {
        //    return util::file_system::get_file_content(out, path, true);
        //}
        return util::file_system::get_file_content(out, path, true);
    }

    bool config_manager::default_version_loader(std::string& out) {
        out = "0";
        return true;
    }

}  // namespace excel
