
//
// generated by xrescode on 2019-06-06 22:37:19, please don't edit it
//

#ifndef CONFIG_EXCEL_CONFIG_MANAGER_H
#define CONFIG_EXCEL_CONFIG_MANAGER_H

#pragma once

#include <stdint.h>
#include <cstddef>
#include <functional>
#include <list>
#include <string>

#include <std/smart_ptr.h>

#include <design_pattern/singleton.h>

#include <lock/spin_rw_lock.h>

#include <config_set_FaActorInfo.h>
#include <config_set_FaMapInfo.h>
#include <config_set_FaTerrainInfo.h>

namespace excel {
    class config_manager : public util::design_pattern::singleton<config_manager> {
    public:
        typedef std::function<bool(std::string&, const char* path)> read_buffer_func_t;
        typedef std::function<bool(std::string&)> read_version_func_t;

        typedef struct {
            std::string version;

            FaGame::config_set_FaActorInfo FaActorInfo ;
            FaGame::config_set_FaMapInfo FaMapInfo ;
            FaGame::config_set_FaTerrainInfo FaTerrainInfo ;

        } config_group_t;
        typedef std::shared_ptr<config_group_t> config_group_ptr_t;

    protected:
        config_manager();
        ~config_manager();

    public:
        int init();

        int init_group();

        bool load_file_data(std::string& write_to, const std::string& file_path);

        /**
         * @brief 执行reload，如果版本号变化则要重新加载文件
         */
        int reload();

        /**
         * @brief 执行reload加载所有资源
         */
        int reload_all();

        read_buffer_func_t get_buffer_loader() const;
        void set_buffer_loader(read_buffer_func_t fn);

        read_version_func_t get_version_loader() const;
        void set_version_loader(read_version_func_t fn);

        config_group_ptr_t get_current_config_group() const;
    private:
        static bool default_buffer_loader(std::string&, const char* path);
        static bool default_version_loader(std::string&);

    private:
        read_buffer_func_t read_file_handle_;
        read_version_func_t read_version_handle_;
        mutable ::util::lock::spin_rw_lock handle_lock_;

        std::list<config_group_ptr_t> config_group_list_;
        mutable ::util::lock::spin_rw_lock config_group_lock_;
    };
}  // namespace excel

#endif  // CONFIG_EXCEL_CONFIG_MANAGER_H
