
//
// generated by xrescode on 2019-06-10 18:48:31, please don't edit it
//

#ifndef CONFIG_EXCEL_CONFIG_SET_FAGAME_CONFIG_SET_FAMAPINFO_H
#define CONFIG_EXCEL_CONFIG_SET_FAGAME_CONFIG_SET_FAMAPINFO_H

#pragma once

#include <stdint.h>
#include <cstddef>
#include <functional>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>

#include <std/smart_ptr.h>

#include <lock/spin_rw_lock.h>

#include <config/compiler_features.h>
#include <design_pattern/singleton.h>
#include <log/log_wrapper.h>

#include <pbdesc/fa_gamemap.pb.h>

namespace excel {
namespace FaGame {

    class config_set_FaMapInfo {
    public:
        typedef ::FaGame::FaMapInfo item_type;
        typedef ::FaGame::FaMapInfo proto_type;
        typedef std::shared_ptr<item_type> item_ptr_type;

    public:
        config_set_FaMapInfo();
        ~config_set_FaMapInfo();

        int on_inited();

        int load_all();

        void clear();

    private:
        int load_file(const std::string& file_path);
        int load_list(const char*);
        int reload_file_lists();
        void merge_data(item_ptr_type);

    private:
        ::util::lock::spin_rw_lock            load_file_lock_;
        std::unordered_map<std::string, bool> file_status_; // true: already loaded

        // ------------------------- index: id -------------------------
    public:
        typedef item_ptr_type id_value_type;
        id_value_type get_by_id(int32_t Id);

    private:
        typedef std::map<std::tuple<int32_t>, id_value_type> id_container_type;
        id_container_type id_data_;

    };

} /*FaGame*/
}

#endif // CONFIG_EXCEL_CONFIG_SET_FAGAME_CONFIG_SET_FAMAPINFO_H
