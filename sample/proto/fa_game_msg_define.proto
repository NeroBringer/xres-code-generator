syntax = "proto3";

import "fa_game_msg_const.proto";
import "fa_game_msg_struct.proto";

package FaGame.Protocol;

// =============== 命令消息 ===============
message FaRequestStart {
    int32  map_id      = 1;
    uint32 random_seed = 2;
}

message FaRequestActorSet {
    repeated int32 actor_id = 1;
}

message FaRequestActorMoveRange {
    int32 source_actor_id = 1;
}

message FaRequestMoveActor {
    uint32 source_actor_id       = 1;
    FaMovePath move_path = 2;
}

message FaRequestCastSkill {
    uint32 source_actor_id      = 1;
    int32 skill_id              = 2;
    uint32 target_actor_id      = 3;
    FaDirection cast_direction  = 4;
}

message FaRequestActorEnd {
    uint32 source_actor_id      = 1;
}

message FaRequestActorSkillRange {
    uint32 source_actor_id      = 1;
    int32 skill_id              = 2;
    FaVector2 request_block     = 3;
}

// =============== 事件消息 ===============

message FaResponseInit {
}

message FaResponseActorRange {
    int32 source_actor_id  = 1;
    repeated FaMovePath move_list   = 2;
    repeated FaMovePath attack_list = 3;
}

message FaResponseMoveActor {
    bool can_move               = 1;
    uint32 source_actor_id      = 2;
    FaMovePath move_path        = 3;
}

message FaResponseCastSkill {
    bool can_cast               = 1;
    uint32 source_actor_id      = 2;
    int32 skill_id              = 3;
    uint32 target_actor_id      = 4;
    FaDirection cast_direction  = 5;
    int32 target_actor_hp       = 6;
    int32 damage                = 7;
}

message FaResponseActorEnd {
    bool can_actor_end          = 1;
    uint32 source_actor_id      = 2;
}

// ===== 启动流程:  目前版本执行完Start后腰依次推送以下消息
// 1. FaStartReq

message MsgBody {
    oneof cmd {
        FaRequestStart req_start                        = 101; // 启动逻辑请求，开始执行MtLogic::Ready
        FaRequestActorSet req_actor_set                 = 102;
        FaRequestActorMoveRange req_actor_move_range    = 103;
        FaRequestMoveActor req_move_actor               = 104;
        FaRequestCastSkill req_cast_skill               = 105;
        FaRequestActorEnd req_actor_end                 = 106;
        FaRequestActorSkillRange req_actor_skill_range  = 107;
    }

    oneof event {
        FaResponseInit rsp_init                         = 201; // 初始化
        FaResponseActorRange rsp_actor_move_range   = 202;
        FaResponseMoveActor rsp_move_actor              = 203;
        FaResponseCastSkill rsp_cast_skill              = 204;
        FaResponseActorEnd rsp_actor_end                = 205;
        FaResponseActorRange rsp_actor_skill_range = 206;
    }
}

message MsgHead {
    int64 sequence = 1; // 消息序号
}

message FaCoreMsg {
    MsgHead head = 1;
    MsgBody body = 2;
}

message FaResultData {
    int64 start_time = 1;
    int32 map_id     = 2;
    bool  result     = 3;
}

message FaCoreMultiMsg {
    repeated FaCoreMsg msgs                  = 1; // 多个消息
    FaResultData       result                = 2;
    uint32             random_seed           = 3;
    int64              last_tick             = 4;   // 最后一个tick（用于提前判定出数据错误而退出循环）
    string             client_version        = 100; // 仅服务器Dump校验信息用,客户端上报的app版本号
    string             resource_version      = 101; // 仅服务器Dump校验信息用,客户端上报的资源版本号
    string             server_build_version  = 102; // 仅服务器Dump校验信息用,服务器构建版本信息
    string             server_verify_version = 103; // 仅服务器Dump校验信息用,服务器验证版本配置
}