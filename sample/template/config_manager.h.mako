## -*- coding: utf-8 -*-
<%!
import time
%>
//
// generated by xrescode on ${time.strftime("%Y-%m-%d %H:%M:%S")}, please don't edit it
//

#ifndef CONFIG_EXCEL_CONFIG_MANAGER_H
#define CONFIG_EXCEL_CONFIG_MANAGER_H

#pragma once

#include <stdint.h>
#include <cstddef>
#include <functional>
#include <list>
#include <string>

#include <std/smart_ptr.h>

#include <design_pattern/singleton.h>

#include <lock/spin_rw_lock.h>

#if defined(_MSC_VER)
#pragma warning(push)
#if ((defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L))
#pragma warning(disable : 4996)
#pragma warning(disable : 4309)
#endif
#if _MSC_VER >= 1922 && ((defined(__cplusplus) && __cplusplus >= 201704L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201704L))
#pragma warning(disable : 5054)
#endif
#if _MSC_VER < 1910
#pragma warning(disable : 4800)
#endif
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#include <Windows.h>
#endif

#ifdef max
#undef max
#endif

#ifdef min
#undef min
#endif

#if defined(__GNUC__) && !defined(__clang__) && !defined(__apple_build_version__)
#if (__GNUC__ * 100 + __GNUC_MINOR__ * 10) >= 460
#pragma GCC diagnostic push
#endif
#pragma GCC diagnostic ignored "-Wunused-parameter"
#elif defined(__clang__) || defined(__apple_build_version__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#endif

% for pb_msg in pb_set.generate_message:
#include "${pb_msg.get_cpp_header_path()}"
% endfor

#if defined(__GNUC__) && !defined(__clang__) && !defined(__apple_build_version__)
#if (__GNUC__ * 100 + __GNUC_MINOR__ * 10) >= 460
#pragma GCC diagnostic pop
#endif
#elif defined(__clang__) || defined(__apple_build_version__)
#pragma clang diagnostic pop
#endif

#if defined(_MSC_VER)
#pragma warning(pop)
#endif

namespace excel {
    struct config_group_t {
        std::string version;

% for pb_msg in pb_set.generate_message:
        ${pb_msg.get_cpp_class_full_name()} ${pb_msg.get_cpp_public_var_name()} ;
% endfor

% for block_file in pb_set.get_custom_blocks("custom_config_group"):
<%include file="${block_file}" />
% endfor
    } ;

    class config_manager : public util::design_pattern::singleton<config_manager> {
    public:
        typedef std::function<bool(std::string&, const char* path)> read_buffer_func_t;
        typedef std::function<bool(std::string&)> read_version_func_t;
        typedef std::shared_ptr<config_group_t> config_group_ptr_t;
        typedef std::function<void(config_group_ptr_t)> on_load_func_t;

    protected:
        config_manager();
        ~config_manager();

    public:
        int init();

        int init_new_group();

        void reset();

        void clear();

        bool load_file_data(std::string& write_to, const std::string& file_path);

        /**
         * @brief 执行reload，如果版本号变化则要重新加载文件
         */
        int reload();

        /**
         * @brief 执行reload加载所有资源
         * @param del_when_failed 如果失败是否删除分组
         */
        int reload_all(bool del_when_failed = false);

        read_buffer_func_t get_buffer_loader() const;
        void set_buffer_loader(read_buffer_func_t fn);

        read_version_func_t get_version_loader() const;
        void set_version_loader(read_version_func_t fn);

        config_group_ptr_t get_current_config_group();

        inline void set_override_same_version(bool v) { override_same_version_ = v; }
        inline bool get_override_same_version() const { return override_same_version_; }

        inline void set_group_number(size_t sz) { max_group_number_ = sz; }
        inline size_t get_group_number() const { return max_group_number_; }

        inline void set_on_group_created(on_load_func_t func) { on_group_created_ = func; }
        inline const on_load_func_t& get_n_group_created() const { return on_group_created_; }

        inline void set_on_group_reload_all(on_load_func_t func) { on_group_reload_all_ = func; }
        inline const on_load_func_t& get_on_group_reload_all() const { return on_group_reload_all_; }

        inline void set_on_group_destroyed(on_load_func_t func) { on_group_destroyed_ = func; }
        inline const on_load_func_t& get_on_group_destroyed() const { return on_group_destroyed_; }
    private:
        static bool default_buffer_loader(std::string&, const char* path);
        static bool default_version_loader(std::string&);

    private:
        bool override_same_version_;
        size_t max_group_number_;
        on_load_func_t on_group_created_;
        on_load_func_t on_group_reload_all_;
        on_load_func_t on_group_destroyed_;

        read_buffer_func_t read_file_handle_;
        read_version_func_t read_version_handle_;
        mutable ::util::lock::spin_rw_lock handle_lock_;

        std::list<config_group_ptr_t> config_group_list_;
        mutable ::util::lock::spin_rw_lock config_group_lock_;
    };
}  // namespace excel

#endif  // CONFIG_EXCEL_CONFIG_MANAGER_H
